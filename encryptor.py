from pseudo_prime_check import powerMod
from pseudo_prime_check import isPrime
from pseudo_prime_check import isStrongPseudoprime
import random
import fractions
import uuid
import math
from key_generator import key_maker
from key_generator import egcd
from key_generator import mulinv
from key_generator import prime_maker

def encryptor(n,e, plain_num):
    #encrypts an integer using e, the public key, and n
    ciphertext = pow(plain_num, e, n)
    return ciphertext
def decryptor(n, d, ciph_num):
    #decrypts an integer using d, the private key, and n
    plaintext = pow(ciph_num, d, n)
    return plaintext
#a = 117002266385177274777359896637906928206970093832218062222144917363790239433007452960236821762573510423475405655793994937251971791652941784589993061837760310923160552543598152121818467191948768781476736287012933166152662244217032714821093638158997932632291335361355754549641139018019160816486851281873216349611732155477999525102069035649992626909415980397637237811628903900546638671320967111758216439835259810772654364326403015815841363196502315922402692284694812817033677509393046109121104742465342201306110557592731094968826560401163735722329734845335590320973233148744075247638314620643532629522049665130313815373494195344202598706682174408047053362413265507199697057730205022307879232475570171534022808060471965865314468851499082849172196687833766109214838938540854823333103334111279058758157145784823472272851335809419514143177457589478850121791890189798391720009088430821837079527763882175482257059341890213185513521016006007914510771370225128512518876295928433362648370356161969164270639545124993749576504116552041979570273835662029436814450925451512804268457947999962434854420410053806494637441803800535385872876518466252717996043952416333431865063715372377901994282014370964621087361735774631461620489087517051338303040054929
#b = 2**16 + 1
#c = 1234
#ciph = encryptor(a, b, c)
#print encryptor(a, b, c)
#d = 106810070544766864448782945451465518726316535297525706495971529304680446843736666245098929954243373691436693311790944490988464048568170668301113949427491705172816112082920949160690224684680576447780493134861372437929436451882396711206133789825236558181252208859105422634480218276241670404943395921264488575378346756762405291481248550664018171151205262298088723374492791286783104176690889426770687903969725864151645105954194418881397639155291523215977360483524135392488073272074815182515181569681500422963241870083432503010436172783020644533554227021785215950122626803531753573030579476080096283916645366211703540689444111741753027269939493897178759401127108829064920913463721920238457033929737823127091735043846328265851809110056032936213123553984580255293608161737436234159282924424914458581575260683207384227859862502905841295823308380190203844666149719806974915787708299061164711294556609604836206173870003708854850821191828149078900701223457604676916815684495109940449664880742500431118654382619666015635626973628847477239961041514682126880290517780782342489021784141381609280627410130464917756438937837165011541951478695592584633508758877916704572271771993397519708516015807747943271969685300205149670892070934946808938552864769
#print decryptor(a, d, ciph)
